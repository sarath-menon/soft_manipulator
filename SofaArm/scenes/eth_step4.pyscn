# -*- coding: utf-8 -*-
from stlib.physics.deformable import ElasticMaterialObject
from stlib.physics.constraints import FixedBox
from stlib.physics.collision import CollisionMesh
from stlib.scene import Node
from softrobots.actuators import PullingCable
from splib.loaders import loadPointListFromFile


from stlib.scene import MainHeader, ContactHeader
from stlib.visuals import ShowGrid
from stlib.physics.rigid import Floor
from stlib.physics.rigid import Cube

import Sofa
class FingerController(Sofa.PythonScriptController):
    def __init__(self, node, cable):
        self.cableconstraintvalue = cable.getObject("CableConstraint").findData('value')
        self.name = "FingerController"

    def onKeyPressed(self,key):

        if key == Key.uparrow:
            self.cableconstraintvalue.value =  self.cableconstraintvalue.value[0][0] + 1.
        elif key == Key.downarrow:
            self.cableconstraintvalue.value =  self.cableconstraintvalue.value[0][0] - 1.

def Finger(parentNode=None, name="Finger",
           rotation=[0.0, 0.0, 0.0], translation=[0.0, 0.0, 0.0],
           fixingBox=[0.0,0.0,0.0], pullPointLocation=[0.0,0.0,0.0]):

    finger = Node(parentNode, "Finger")
    eobject = ElasticMaterialObject(finger,
                                    volumeMeshFileName="data/mesh/eth_manip.vtk",
                                    surfaceMeshFileName="data/mesh/eth_manip.stl",
                                    surfaceColor=[0.0,0.7,0.8],translation=[-375., -80., 375.], rotation=[0, 0, 0])

    FixedBox(eobject, doVisualization=True, atPositions=[-30,-15,-25,30,10,30])
    cable = PullingCable(eobject,
                         cableGeometry=loadPointListFromFile("data/mesh/cable.json"))

    FingerController(finger, cable)

    CollisionMesh(eobject,
         surfaceMeshFileName="data/mesh/eth_manip.stl", name="part0", collisionGroup=[1, 2], translation=[-375., -80., 375.])


    # CollisionMesh(eobject,
    #              surfaceMeshFileName="data/mesh/fingerCollision_part1.stl",
    #              name="CollisionMeshAuto1", collisionGroup=[1])
    #
    # CollisionMesh(eobject,
    #              surfaceMeshFileName="data/mesh/fingerCollision_part2.stl",
    #              name="CollisionMeshAuto2", collisionGroup=[2])

def createScene(rootNode):

    m=MainHeader(rootNode, plugins=["SoftRobots"])
    m.getObject("VisualStyle").displayFlags='showForceFields showBehaviorModels showInteractionForceFields showCollisionModels'
    ContactHeader(rootNode, alarmDistance=4, contactDistance=3, frictionCoef=0.08)

    ShowGrid(rootNode)
    Finger(rootNode)

    return rootNode
